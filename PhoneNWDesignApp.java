package PhoneNetworkApp;

import GraphFramework.KruskalAlg;
import GraphFramework.MHPrimAlg;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Scanner;

/**
 * Entry point of the program.
 */
public class PhoneNWDesignApp {

    static Scanner input = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BluePrGraph phLNetwork = new BluePrGraph();

        KruskalAlg K = new KruskalAlg(phLNetwork);
        MHPrimAlg MH = new MHPrimAlg(phLNetwork);

        // Reads graph from text file
        List<String> file = Files.readAllLines(Paths.get("GraphPart1.txt"));
        phLNetwork.readGraphFromFile(file);

        // Run Kruskal algorithm
        System.out.println("The phone network (minimum spanning tree) generated by Kruskal algorithm is as follows:\n");
        K.kruskal();

        // Run Prim's (min heap ver) algorithm
        System.out.println("\nThe phone network (minimum spanning tree) generated by min-heap based Prim algorithm is as follows:\n");
        MH.MHPrim();

        // Initiate randomized graph segment
        System.out.println("\n>> Test  cases: (where n is the number of vertices and m is the number of edges): ");
        System.out.println(" 1:  n = 1,000,  m = 10,000");
        System.out.println(" 2:  n = 1,000,  m = 15,000");
        System.out.println(" 3:  n = 1,000,  m = 25,000");
        System.out.println(" 4:  n = 5,000,  m = 15,000");
        System.out.println(" 5:  n = 5,000,  m = 25,000");
        System.out.println(" 6:  n = 10,000, m = 15,000");
        System.out.println(" 7:  n = 10,000, m = 25,000");
        System.out.print("\n>> Choose a test case: ");
        
        switch (input.nextInt()) {
            case 1:
                createGraph(1000, 10000);
                break;
            case 2:
                createGraph(1000, 15000);
                break;
            case 3:
                createGraph(1000, 25000);
                break;
            case 4:
                createGraph(5000, 15000);
                break;
            case 5:
                createGraph(5000, 25000);
                break;
            case 6:
                createGraph(10000, 15000);
                break;
            case 7:
                createGraph(10000, 25000);

            default:
                System.out.println("Invalid input!");
                break;
        }
    }

    public static void createGraph(int vertices, int edges) {
        BluePrGraph graph = new BluePrGraph(vertices, edges);
        
        KruskalAlg K = new KruskalAlg(graph);
        MHPrimAlg MH = new MHPrimAlg(graph);

        System.out.print("\n>> Is the graph directed?\n   Enter (true) or (false): ");
        String directed = input.next();

        
        if (directed.equalsIgnoreCase("true")) {
            System.out.println(" Prim's and Kruskal's MST Algorithms don't work on directed graphs.");
            System.out.print(" Would you like to quit (enter quit), or continue considering the graph is undirected (enter cont)? ");

            String contOrQuit = input.next();

            if (contOrQuit.equalsIgnoreCase("quit")) {
                System.out.println("Thank you for coming by!");
                System.exit(0);
            }
        }

        // Make randomized graph
        graph.make_graph();

        // Invoke algorithm methods
        K.kruskal();
        MH.MHPrim();
    }
}
